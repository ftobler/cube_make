import os


tab = "\t"


class MakefileGenerator:
    def __init__(self, project_path, project_name, source_paths, include_paths,
                 defines, linker_script, prebuild_step, postbuild_step,
                 convert_hex, convert_bin):
        self.project_path = project_path
        self.project_name = project_name
        self.source_paths = source_paths
        self.include_paths = include_paths
        self.defines = defines
        self.linker_script = linker_script
        self.prebuild_step = prebuild_step
        self.postbuild_step = postbuild_step
        self.convert_hex = convert_hex
        self.convert_bin = convert_bin

    def _find_sources(self, extension):
        found_files = []
        for source_path in self.source_paths:
            full_path = os.path.join(self.project_path, source_path)
            for root, _, files in os.walk(full_path):
                for file in files:
                    if file.endswith(extension):
                        relative_path = os.path.relpath(os.path.join(root, file), self.project_path)
                        found_files.append(relative_path)
        # Sort files based on their directory structure to match the desired order
        # application, then Core/Src, then Drivers
        return sorted(found_files)

    def generate(self):
        c_sources = self._find_sources('.c')
        cpp_sources = self._find_sources('.cpp')
        s_sources = self._find_sources('.s')

        # Define source variables as space-separated lists

        c_sources_var = self.format_file_list("C_SOURCES", c_sources)
        cpp_sources_var = self.format_file_list("CPP_SOURCES", cpp_sources)
        s_sources_var = self.format_file_list("S_SOURCES", s_sources)

        # Collect all unique source directories for VPATH
        all_sources = c_sources + cpp_sources + s_sources
        vpath_dirs = sorted(list(set(os.path.dirname(src) for src in all_sources if os.path.dirname(src))))
        vpath_var = "VPATH = " + ":".join(vpath_dirs) if vpath_dirs else ""

        # Format include paths and defines with -I and -D prefixes
        c_includes_var = self.format_file_list("C_INCLUDES", self.include_paths, prefix="-I")
        c_defines_var = self.format_file_list("C_DEFINES", self.defines, prefix="-D")

        hex_conversion_raw = "$(OBJCOPY) -O ihex $(BUILD_DIR)/$(PROJECT_NAME).elf $(BUILD_DIR)/$(PROJECT_NAME).hex"
        bin_conversion_raw = "$(OBJCOPY) -O binary $(BUILD_DIR)/$(PROJECT_NAME).elf $(BUILD_DIR)/$(PROJECT_NAME).bin"

        if self.convert_hex:
            hex_conversion = f"{tab}{hex_conversion_raw}"
        else:
            hex_conversion = f"# {hex_conversion_raw}"

        if self.convert_bin:
            bin_conversion = f"{tab}{bin_conversion_raw}"
        else:
            bin_conversion = f"# {bin_conversion_raw}"

        makefile_content = f"""
# Makefile generated by eclipse_to_make

PROJECT_NAME = {self.project_name}

# Source files
{c_sources_var}
{cpp_sources_var}
{s_sources_var}

# VPATH for source directories
{vpath_var}

# Include paths
{c_includes_var}

# Defines
{c_defines_var}

# Linker script
LD_SCRIPT = {self.linker_script}

# Toolchain
CC = arm-none-eabi-gcc
CXX = arm-none-eabi-g++
AS = arm-none-eabi-as
LD = arm-none-eabi-gcc
AR = arm-none-eabi-ar
OBJCOPY = arm-none-eabi-objcopy
OBJDUMP = arm-none-eabi-objdump
SIZE = arm-none-eabi-size

# Flags
CFLAGS = -mcpu=cortex-m0plus -mthumb
CXXFLAGS = -mcpu=cortex-m0plus -mthumb
ASFLAGS = -mcpu=cortex-m0plus -mthumb
LDFLAGS = -T$(LD_SCRIPT) -mcpu=cortex-m0plus -mthumb

# Output directories
BUILD_DIR = build

# Object files
C_OBJECTS = $(patsubst %.c,$(BUILD_DIR)/%.o,$(notdir $(C_SOURCES)))
CPP_OBJECTS = $(patsubst %.cpp,$(BUILD_DIR)/%.o,$(notdir $(CPP_SOURCES)))
S_OBJECTS = $(patsubst %.s,$(BUILD_DIR)/%.o,$(notdir $(S_SOURCES)))

OBJECTS = $(C_OBJECTS) $(CPP_OBJECTS) $(S_OBJECTS)

.PHONY: all clean

all: $(BUILD_DIR)/$(PROJECT_NAME).elf

$(BUILD_DIR)/$(PROJECT_NAME).elf: $(OBJECTS)
{tab}@mkdir -p $(@D)
# pre build step
{tab}{self.prebuild_step}
{tab}$(LD) $(LDFLAGS) $(OBJECTS) -o $@
{tab}$(SIZE) $@
# *.hex conversion
{hex_conversion}
# *.bin conversion
{bin_conversion}
# post build step
{tab}{self.postbuild_step}

$(BUILD_DIR)/%.o: %.c
{tab}@mkdir -p $(@D)
{tab}$(CC) $(CFLAGS) $(C_INCLUDES) $(C_DEFINES) -c $< -o $@

$(BUILD_DIR)/%.o: %.cpp
{tab}@mkdir -p $(@D)
{tab}$(CXX) $(CXXFLAGS) $(C_INCLUDES) $(C_DEFINES) -c $< -o $@

$(BUILD_DIR)/%.o: %.s
{tab}@mkdir -p $(@D)
{tab}$(AS) $(ASFLAGS) $< -o $@

clean:
{tab}rm -rf $(BUILD_DIR)

"""
        return makefile_content

    def format_file_list(self, key: str, file_list: list[str], prefix: str = "") -> str:
        backdash = "\\"
        newline = "\n"
        if len(file_list) == 0:
            return f"# {key} = <list is empty>"
        formatted_list = [f"{prefix}{item}" for item in file_list]
        return f"{key} = " + (f" {backdash}{newline}{tab}".join([""] + formatted_list))
